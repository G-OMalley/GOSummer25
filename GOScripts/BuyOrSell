import pandas as pd
import numpy as np
from pathlib import Path
from datetime import datetime, timedelta
import ast

# --- Configuration ---
# Define the path for the output CSV file
OUTPUT_CSV_FILENAME = 'single_day_accuracy_results.csv' # Changed filename for clarity

# --- Path Setup ---
# Determine the directory where this script is located
# In this execution environment, Path(__file__) might not point to a persistent script location
# So we assume the current working directory for files, or manage explicitly.
# For simplicity and to match user's conceptual structure, we'll keep project_root logic
# but modify load_clean_df to also check the current working directory for uploaded files.
script_dir = Path('.') # Assume script is run from project root for simpler pathing
project_root = script_dir # In this context, the working directory is the 'root'

# Define the primary INFO folder (relative to project_root, or simply the working directory if files are flat)
data_folder = project_root / "INFO"
# Define the GOScripts folder
goscripts_folder = project_root / "GOScripts"

# Specific subfolder for backtest_results.csv and EIAStoragePred.csv
goscripts_info_folder = goscripts_folder / "INFO"
goscripts_info_folder.mkdir(parents=True, exist_ok=True) # Ensure this specific subfolder exists

# New: Define GOScripts Output folder where EIAStoragePred.csv is located
goscripts_output_folder = goscripts_folder / "GOutput"
goscripts_output_folder.mkdir(parents=True, exist_ok=True) # Ensure this exists

print(f"Data folder resolved to: {data_folder.resolve()}")
print(f"GOScripts folder resolved to: {goscripts_folder.resolve()}")
print(f"GOScripts INFO folder resolved to: {goscripts_info_folder.resolve()}")
print(f"GOScripts Output folder resolved to: {goscripts_output_folder.resolve()}")

# --- Files to be used ---
files = {
    "eia_changes": "EIAchanges.csv",
    "prices": "PRICES.csv",
    "eia_predictions": "EIAStoragePred.csv" # New file for forecasted storage
}

# --- Components to backtest ---
COMPONENTS_TO_BACKTEST = ['TETCO-M3', 'Transco Zn3', 'Chicago', 'Henry', 'Waha']
HENRY_HUB_NAME = 'Henry' # Ensure this matches your Henry Hub column in PRICES.csv

# --- Data Loading and Cleaning ---
def load_clean_df(file_key, fname, data_path):
    fpath = data_path / fname
    
    try:
        df = pd.read_csv(fpath)
    except FileNotFoundError:
        # If not found in specified path, try loading directly from current working directory
        print(f"Attempting to load '{fname}' from current working directory (as {fpath} not found)...")
        fpath_current_dir = Path('.') / fname
        try:
            df = pd.read_csv(fpath_current_dir)
            print(f"✅ Successfully loaded '{fname}' from {fpath_current_dir}.")
        except FileNotFoundError:
            print(f"❌ Error: Required file '{fname}' not found at {fpath} or {fpath_current_dir}. Skipping this file.")
            return None
    except Exception as e:
        print(f"❌ Error reading CSV file '{fname}' from {fpath}: {e}. Skipping this file.")
        return None

    if file_key == "eia_predictions":
        df = df.rename(columns={
            'Forecast Date': 'forecast_date',
            'Forecast (Bcf)': 'predicted_change',
            'Region': 'region_name'
        })
        if 'forecast_date' in df.columns:
            df['forecast_date'] = pd.to_datetime(df['forecast_date'], errors='coerce')
        if 'predicted_change' in df.columns:
            df['predicted_change'] = pd.to_numeric(df['predicted_change'], errors='coerce')
        return df

    elif file_key == "eia_changes":
        df.columns = df.columns.str.lower().str.replace(" (bcf)", "", regex=False).str.replace(" ", "_").str.replace(":", "").str.strip()
        if "period" in df.columns:
            df["period"] = pd.to_datetime(df["period"], errors="coerce")
        return df

    elif file_key == "prices":
        df.columns = df.columns.str.strip()
        if 'Date' in df.columns:
            df = df.rename(columns={'Date': 'date'})
            df['date'] = pd.to_datetime(df['date'], errors='coerce')

        henry_col_found = False
        potential_henry_cols = [col for col in df.columns if HENRY_HUB_NAME.lower() in col.lower()]
        if HENRY_HUB_NAME in df.columns:
            df = df.rename(columns={HENRY_HUB_NAME: HENRY_HUB_NAME.lower()})
            henry_col_found = True
        elif potential_henry_cols:
            df = df.rename(columns={potential_henry_cols[0]: HENRY_HUB_NAME.lower()})
            henry_col_found = True

        if henry_col_found:
            df[HENRY_HUB_NAME.lower()] = pd.to_numeric(df[HENRY_HUB_NAME.lower()], errors='coerce')
        return df
    
    return df

# --- Core Component Analysis Logic (Modified for Prediction-Only Signal) ---
def analyze_components(current_signal_date, raw_data, components_to_test):
    """
    Analyzes components based on EIA storage prediction for a given date,
    generating signals based on prediction magnitude.
    
    current_signal_date should be the EIA report date for which a prediction exists.
    """
    prices_df = raw_data.get("prices")
    eia_changes_df = raw_data.get("eia_changes")
    eia_predictions_df = raw_data.get("eia_predictions")

    if prices_df is None or eia_changes_df is None or eia_predictions_df is None or \
       prices_df.empty or eia_changes_df.empty or eia_predictions_df.empty:
        print("\nFATAL: One or more critical dataframes (prices, EIA changes, EIA predictions) are missing or empty. Cannot proceed with analysis.")
        return [], []

    prices_df['date'] = pd.to_datetime(prices_df['date'], errors='coerce')
    eia_changes_df['period'] = pd.to_datetime(eia_changes_df['period'], errors='coerce')
    eia_predictions_df['forecast_date'] = pd.to_datetime(eia_predictions_df['forecast_date'], errors='coerce')

    prices_df.dropna(subset=['date'], inplace=True)
    eia_changes_df.dropna(subset=['period'], inplace=True)
    eia_predictions_df.dropna(subset=['forecast_date', 'predicted_change'], inplace=True)

    all_component_analysis_dicts = []
    
    predicted_eia_filtered = eia_predictions_df[
        (eia_predictions_df['forecast_date'].dt.date == current_signal_date) &
        (eia_predictions_df['region_name'] == 'Lower 48 States')
    ]
    
    predicted_change_value = predicted_eia_filtered['predicted_change'].iloc[0] if not predicted_eia_filtered.empty else np.nan

    actual_change_value = np.nan 
    overall_signal = "HOLD"
    summary = f"No valid prediction for {current_signal_date}."
    confidence_score = 0

    actual_eia_row_for_report = eia_changes_df[eia_changes_df['period'].dt.date == current_signal_date]
    if not actual_eia_row_for_report.empty:
        actual_change_col_name = 'lower_48_states_storage_change'
        if actual_change_col_name in actual_eia_row_for_report.iloc[0].index:
            actual_change_value = actual_eia_row_for_report.iloc[0][actual_change_col_name]
        else:
            print(f"WARNING: Actual change column '{actual_change_col_name}' not found in EIAchanges.csv for {current_signal_date}. Cannot calculate surprise.")
    else:
        print(f"WARNING: No actual EIA change data found for {current_signal_date} in EIAchanges.csv.")


    if pd.notna(predicted_change_value):
        bullish_prediction_threshold = -100
        bearish_prediction_threshold = 100 

        if predicted_change_value < bullish_prediction_threshold:
            overall_signal = "BUY"
            summary = f"Predicted Bullish: Forecasted draw of {predicted_change_value:+.1f} Bcf."
        elif predicted_change_value > bearish_prediction_threshold:
            overall_signal = "SELL"
            summary = f"Predicted Bearish: Forecasted build of {predicted_change_value:+.1f} Bcf."
        else:
            overall_signal = "HOLD"
            summary = f"Predicted Neutral: Forecasted change of {predicted_change_value:+.1f} Bcf."

        if overall_signal == "BUY":
            confidence_score = min(1.0, abs(predicted_change_value / bullish_prediction_threshold))
        elif overall_signal == "SELL":
            confidence_score = min(1.0, abs(predicted_change_value / bearish_prediction_threshold))
        else:
            confidence_score = 0.5 

        if pd.notna(actual_change_value):
            surprise = actual_change_value - predicted_change_value
            summary += f" (Actual: {actual_change_value:+.1f} Bcf, Surprise: {surprise:+.1f} Bcf)"

    else:
        summary = f"No 'Lower 48 States' prediction found for {current_signal_date} in EIAStoragePred.csv."
        print(f"Warning: {summary}")
        overall_signal = "HOLD" 
        confidence_score = 0


    for component_name in components_to_test:
        component_data = {
            "name": component_name,
            "total_score": 0, 
            "bias_tag": overall_signal,
            "Confidence": confidence_score, 
            "summary": summary
        }
        
        if overall_signal == "BUY":
            component_data['total_score'] = 1
        elif overall_signal == "SELL":
            component_data['total_score'] = -1
        else:
            component_data['total_score'] = 0

        all_component_analysis_dicts.append(component_data)

    sorted_top_components = sorted(all_component_analysis_dicts, key=lambda x: x["Confidence"], reverse=True)

    return sorted_top_components, all_component_analysis_dicts

# --- New function for single-day accuracy comparison ---
def evaluate_single_day_accuracy(component_name, signal, confidence, analysis_date, prices_df):
    """
    Compares the predicted signal direction with the actual daily price movement
    from the previous day's close to the analysis_date's close.
    """
    trade_info = {
        'Component': component_name,
        'Signal Date': analysis_date,
        'Signal': signal,
        'Confidence': confidence,
        'Predicted Direction': 'Neutral'
    }

    if signal == 'BUY':
        trade_info['Predicted Direction'] = 'Up'
    elif signal == 'SELL':
        trade_info['Predicted Direction'] = 'Down'

    # Get prices for analysis_date and the previous trading day
    prices_df_filtered = prices_df.set_index('date').sort_index()

    current_day_price_series = prices_df_filtered.loc[[analysis_date], component_name] if component_name in prices_df_filtered.columns else pd.Series([np.nan])
    current_day_price = current_day_price_series.iloc[0] if not current_day_price_series.empty else np.nan

    prev_day = analysis_date - timedelta(days=1)
    prev_day_price_series = prices_df_filtered.loc[[prev_day], component_name] if component_name in prices_df_filtered.columns else pd.Series([np.nan])
    prev_day_price = prev_day_price_series.iloc[0] if not prev_day_price_series.empty else np.nan

    trade_info['Price on Signal Date'] = current_day_price
    trade_info['Price on Prev Day'] = prev_day_price

    if pd.notna(current_day_price) and pd.notna(prev_day_price) and prev_day_price != 0:
        daily_change_percent = (current_day_price - prev_day_price) / prev_day_price
        trade_info['Daily Change %'] = daily_change_percent

        if daily_change_percent > 0:
            trade_info['Actual Direction'] = 'Up'
        elif daily_change_percent < 0:
            trade_info['Actual Direction'] = 'Down'
        else:
            trade_info['Actual Direction'] = 'Flat'
        
        # Compare predicted vs actual direction
        if (trade_info['Predicted Direction'] == 'Up' and trade_info['Actual Direction'] == 'Up') or \
           (trade_info['Predicted Direction'] == 'Down' and trade_info['Actual Direction'] == 'Down'):
            trade_info['Prediction Matched Actual'] = True
        elif trade_info['Predicted Direction'] == 'Neutral' and trade_info['Actual Direction'] == 'Flat':
            trade_info['Prediction Matched Actual'] = True
        else:
            trade_info['Prediction Matched Actual'] = False
            
    else:
        trade_info['Daily Change %'] = np.nan
        trade_info['Actual Direction'] = 'N/A (Missing Price Data)'
        trade_info['Prediction Matched Actual'] = False # Cannot confirm match without data

    return trade_info

# === Modified run_backtest for single-point accuracy ===
def run_backtest(prices_df, raw_data, target_date, components_to_backtest, output_file_path=None):
    """
    Performs a single-point analysis for a target date, comparing predicted
    direction with actual single-day price movement.
    """
    prices_df['date'] = pd.to_datetime(prices_df['date'], errors='coerce')
    prices_df.dropna(subset=['date'], inplace=True)
    prices_df = prices_df.sort_values('date') # Ensure sorted for prior day lookup

    analysis_date_dt = pd.to_datetime(target_date).date()
    prev_day_dt = analysis_date_dt - timedelta(days=1)

    print(f"\n--- Running Single-Point Accuracy Test for {analysis_date_dt} ---")
    print("------------------------------------------------------------------\n")

    # Generate the signal for the target date based on prediction
    top_components_signals, _ = analyze_components(analysis_date_dt, raw_data, components_to_backtest)

    if not top_components_signals:
        print(f"⚠️ No prediction signals could be generated for {analysis_date_dt}.")
        return

    results = []
    for comp_signal_data in top_components_signals:
        result = evaluate_single_day_accuracy(
            component_name=comp_signal_data['name'],
            signal=comp_signal_data['bias_tag'],
            confidence=comp_signal_data['Confidence'],
            analysis_date=analysis_date_dt,
            prices_df=prices_df
        )
        results.append(result)

    df_results = pd.DataFrame(results)

    if not df_results.empty:
        df_results.replace([np.inf, -np.inf], np.nan, inplace=True)
        
        if output_file_path:
            df_results.to_csv(output_file_path, index=False)
            print(f"✅ Accuracy test completed. Results saved to {output_file_path}.")

        print("\n--- Single-Point Accuracy Test Results ---")
        print("------------------------------------------\n")
        print(df_results.to_string(index=False)) # Print full DataFrame

        matched_count = df_results['Prediction Matched Actual'].sum()
        total_tested = len(df_results)
        
        if total_tested > 0:
            print(f"\nOverall Accuracy for {analysis_date_dt}: {(matched_count / total_tested) * 100:.2f}% ({matched_count}/{total_tested} predictions matched actual direction)")
        else:
            print("\nNo components had sufficient price data for comparison.")

    else:
        print("⚠️ No results generated for the single-point accuracy test. Check data availability for 2025-07-03 and 2025-07-04.")


# --- Main Execution ---
if __name__ == "__main__":
    raw_data = {}
    for key, fname in files.items():
        if key == "eia_predictions":
            raw_data[key] = load_clean_df(key, fname, goscripts_output_folder)
        else:
            raw_data[key] = load_clean_df(key, fname, data_folder)

    raw_data = {k: v for k, v in raw_data.items() if v is not None}

    today_analysis_date = None
    prices_df_for_date_check = raw_data.get("prices")
    if prices_df_for_date_check is not None and not prices_df_for_date_check.empty and 'date' in prices_df_for_date_check.columns:
        prices_df_for_date_check['date'] = pd.to_datetime(prices_df_for_date_check['date'], errors='coerce')
        prices_df_for_date_check.dropna(subset=['date'], inplace=True)
        if not prices_df_for_date_check.empty:
            today_analysis_date = prices_df_for_date_check['date'].max().date()
        else:
            print("CRITICAL ERROR: PRICES.csv loaded but is empty or dates are invalid after cleaning. Cannot determine analysis date.")
            exit()
    else:
        print("CRITICAL ERROR: PRICES.csv not loaded or missing 'Date' column. Cannot determine analysis date.")
        exit()

    print(f"\n--- Running Natural Gas Market Component Analysis for {today_analysis_date} (Simplified) ---")
    print("--------------------------------------------------------------------------\n")

    top_components_current_day, all_component_tags_for_summary = analyze_components(today_analysis_date, raw_data, COMPONENTS_TO_BACKTEST)

    if top_components_current_day:
        print("\n### Current Day Signal Based on EIA Prediction Only ###")
        print("--------------------------------------------------\n")
        for i, comp in enumerate(top_components_current_day):
            print(f"**{i+1}. Component: {comp['name']}**")
            print(f"    Signal: {comp['bias_tag']}")
            print(f"    Confidence: {comp['Confidence']:.2f}")
            print(f"    Summary: {comp['summary']}")
            print("\n" + "---" * 15 + "\n")

    else:
        print("\nNo components found for analysis or insufficient data to perform calculations for current day signal.")

    backtest_path = goscripts_info_folder / OUTPUT_CSV_FILENAME

    if raw_data.get("prices") is not None and raw_data.get("eia_changes") is not None and raw_data.get("eia_predictions") is not None:
        run_backtest(
            prices_df=raw_data["prices"].copy(),
            raw_data=raw_data,
            target_date="2025-07-04", # Fixed target date for this specific analysis
            components_to_backtest=COMPONENTS_TO_BACKTEST,
            output_file_path=backtest_path
        )
    else:
        print("⚠️ Cannot run single-point test: Essential data (prices, EIA changes, EIA predictions) not loaded.")