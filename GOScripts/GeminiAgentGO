#!/usr/bin/env python3
"""
Gemini agent for GOSummer25
---------------------------
‚Ä¢ CLI loop: free chat or slash‚Äëcommands  (/summary, /forecast, /help)
‚Ä¢ Pulls data from INFO folder when a command needs it
‚Ä¢ Falls back to direct Gemini conversation otherwise
"""

import os
import sys
import pandas as pd
from pathlib import Path
from dotenv import load_dotenv
import google.generativeai as genai
from tabulate import tabulate

# ‚îÄ‚îÄ setup ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()
API_KEY = os.getenv("GeminiKey")
if not API_KEY:
    sys.exit("‚ùå  GeminiKey missing in .env")

genai.configure(api_key=API_KEY)
model = genai.GenerativeModel(model_name="models/gemini-1.5-flash")

INFO = Path(__file__).resolve().parent / "INFO"

# ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def agent_respond(prompt: str) -> str:
    """Call Gemini and return plain text."""
    resp = model.generate_content(prompt, safety_settings={"HARASSMENT": "BLOCK_NONE"})
    return resp.text.strip()

def load_eia_changes() -> pd.DataFrame:
    p = INFO / "EIAchanges.csv"
    if not p.exists():
        raise FileNotFoundError("EIAchanges.csv not found in INFO/")
    return pd.read_csv(p, parse_dates=["Period"]).set_index("Period")

# ‚îÄ‚îÄ command handlers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def cmd_summary() -> str:
    df = load_eia_changes().tail(4)
    table = tabulate(df, headers="keys", tablefmt="simple", showindex=True)
    prompt = f"""You are an energy‚Äëmarket analyst. Here is the last 4 weeks of EIA storage change data:
{table}
Give me a concise summary of key trends (‚â§120 words)."""
    return agent_respond(prompt)

def cmd_forecast() -> str:
    df = load_eia_changes()
    last_change = df.iloc[-1]
    prompt = f"""Based on this latest weekly storage change ({last_change.values[0]:.1f}‚ÄØBcf on {last_change.name.date()}),
discuss likely impacts on Henry Hub price in the next two weeks (‚â§150 words)."""
    return agent_respond(prompt)

COMMANDS = {
    "/summary":  cmd_summary,
    "/forecast": cmd_forecast,
    "/help":     lambda: (
        "Slash‚Äëcommands:\n"
        "  /summary  ‚Äì summarize last 4 EIA changes\n"
        "  /forecast ‚Äì short‚Äëterm price take\n"
        "  /help     ‚Äì this message\n"
        "Otherwise just chat naturally."
    ),
}
for m in genai.list_models():
    print(m.name)

# ‚îÄ‚îÄ main loop ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if __name__ == "__main__":
    print("üöÄ Gemini agent ready.  Type /help for commands, or ask anything.  Ctrl‚ÄëC to quit.")
    while True:
        try:
            user_in = input("> ").strip()
            if not user_in:
                continue
            if user_in.lower() in ["exit", "quit"]:
                break
            if user_in.split()[0] in COMMANDS:
                out = COMMANDS[user_in.split()[0]]()
            else:
                out = agent_respond(user_in)
            print(out, "\n")
        except KeyboardInterrupt:
            print("\nBye.")
            break
        except Exception as e:
            print(f"‚ö†Ô∏è  Error: {e}\n")
