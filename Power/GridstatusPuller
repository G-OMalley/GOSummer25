from dotenv import load_dotenv
import os
import pandas as pd
import matplotlib.pyplot as plt

# Load API key if needed later
load_dotenv()
API_KEY = os.getenv("GRIDSTATUS_API_KEY")

# --- File Input ---
iso = input("Enter ISO (e.g., CAISO, ERCOT, PJM, etc.): ").strip().upper()
filename = f"{iso}MaxLMP.csv"
base_path = r"C:\Users\gomalley\Documents\GitHub\trader-helper\INFO"
file_path = os.path.join(base_path, filename)

if not os.path.exists(file_path):
    print(f"❌ File not found: {file_path}")
    exit()

# --- Date Input ---
start_date_str = input("Enter a start date (YYYY-MM-DD): ")
end_date_str = input("Enter an end date (YYYY-MM-DD): ")

try:
    start_date = pd.to_datetime(start_date_str)
    end_date = pd.to_datetime(end_date_str)
except ValueError:
    print("❌ Invalid date format. Use YYYY-MM-DD.")
    exit()

# --- Read CSV and Normalize Columns ---
df = pd.read_csv(file_path)
df.columns = df.columns.str.lower()

required_columns = {"date", "location", "max_lmp"}
if not required_columns.issubset(set(df.columns)):
    print(f"❌ Required columns not found. Available columns: {df.columns.tolist()}")
    exit()

# --- Filter Date Column ---
df["date"] = pd.to_datetime(df["date"], errors="coerce")
df = df.dropna(subset=["date"])
df = df[(df["date"] >= start_date) & (df["date"] <= end_date)]

if df.empty:
    print("⚠️ No data found in the given date range.")
    exit()

# --- User selects location ---
locations = sorted(df["location"].unique())
print("Available Locations:")
for i, loc in enumerate(locations, 1):
    print(f"{i}. {loc}")

loc_choice = input("Choose location number: ").strip()
if not loc_choice.isdigit() or not (1 <= int(loc_choice) <= len(locations)):
    print("❌ Invalid location choice.")
    exit()

selected_location = locations[int(loc_choice) - 1]
location_df = df[df["location"] == selected_location]

# --- Prompt output type ---
print("\nOutput options:")
print("1. CSV only\n2. Chart only\n3. Both")
output_choice = input("Choose output type (1/2/3): ").strip()

# --- CSV Output ---
if output_choice in ("1", "3"):
    output_csv = f"{iso}_{selected_location}_MaxLMPs_{start_date_str}_to_{end_date_str}.csv"
    location_df.to_csv(output_csv, index=False)
    print(f"✅ CSV saved to: {output_csv}")

# --- Chart Output ---
if output_choice in ("2", "3"):
    plt.figure(figsize=(12, 6))
    plt.plot(location_df["date"], location_df["max_lmp"], marker="o", linestyle="-")
    plt.title(f"Max LMPs for {selected_location} ({start_date_str} to {end_date_str})")
    plt.xlabel("Date")
    plt.ylabel("Max LMP ($/MWh)")
    plt.grid(True)
    plt.tight_layout()
    plt.show()
from dotenv import load_dotenv
import os
import pandas as pd
import matplotlib.pyplot as plt

# Load API key if needed later
load_dotenv()
API_KEY = os.getenv("GRIDSTATUS_API_KEY")

# --- File Input ---
iso = input("Enter ISO (e.g., CAISO, ERCOT, PJM, etc.): ").strip().upper()
filename = f"{iso}MaxLMP.csv"
base_path = r"C:\Users\gomalley\Documents\GitHub\trader-helper\INFO"
file_path = os.path.join(base_path, filename)

if not os.path.exists(file_path):
    print(f"❌ File not found: {file_path}")
    exit()

# --- Date Input ---
start_date_str = input("Enter a start date (YYYY-MM-DD): ")
end_date_str = input("Enter an end date (YYYY-MM-DD): ")

try:
    start_date = pd.to_datetime(start_date_str)
    end_date = pd.to_datetime(end_date_str)
except ValueError:
    print("❌ Invalid date format. Use YYYY-MM-DD.")
    exit()

# --- Read CSV and Normalize Columns ---
df = pd.read_csv(file_path)
df.columns = df.columns.str.lower()

required_columns = {"date", "location", "max_lmp"}
if not required_columns.issubset(set(df.columns)):
    print(f"❌ Required columns not found. Available columns: {df.columns.tolist()}")
    exit()

# --- Filter Date Column ---
df["date"] = pd.to_datetime(df["date"], errors="coerce")
df = df.dropna(subset=["date"])
df = df[(df["date"] >= start_date) & (df["date"] <= end_date)]

if df.empty:
    print("⚠️ No data found in the given date range.")
    exit()

# --- User selects location ---
locations = sorted(df["location"].unique())
print("Available Locations:")
for i, loc in enumerate(locations, 1):
    print(f"{i}. {loc}")

loc_choice = input("Choose location number: ").strip()
if not loc_choice.isdigit() or not (1 <= int(loc_choice) <= len(locations)):
    print("❌ Invalid location choice.")
    exit()

selected_location = locations[int(loc_choice) - 1]
location_df = df[df["location"] == selected_location]

# --- Prompt output type ---
print("\nOutput options:")
print("1. CSV only\n2. Chart only\n3. Both")
output_choice = input("Choose output type (1/2/3): ").strip()

# --- CSV Output ---
if output_choice in ("1", "3"):
    output_csv = f"{iso}_{selected_location}_MaxLMPs_{start_date_str}_to_{end_date_str}.csv"
    location_df.to_csv(output_csv, index=False)
    print(f"✅ CSV saved to: {output_csv}")

# --- Chart Output ---
if output_choice in ("2", "3"):
    plt.figure(figsize=(12, 6))
    plt.plot(location_df["date"], location_df["max_lmp"], marker="o", linestyle="-")
    plt.title(f"Max LMPs for {selected_location} ({start_date_str} to {end_date_str})")
    plt.xlabel("Date")
    plt.ylabel("Max LMP ($/MWh)")
    plt.grid(True)
    plt.tight_layout()
    plt.show()